// Generated by CoffeeScript 2.7.0
  // utils.coffee
var getCallers,
  indexOf = [].indexOf;

export var doHaltOnError = false;

export var doLog = true;

// ---------------------------------------------------------------------------
export var haltOnError = function() {
  return doHaltOnError = true;
};

// ---------------------------------------------------------------------------
export var disableErrorLogging = function() {
  return doLog = false;
};

// ---------------------------------------------------------------------------
export var enableErrorLogging = function() {
  return doLog = true;
};

// ---------------------------------------------------------------------------
//   error - throw an error
export var error = function(message) {
  if (doHaltOnError) {
    console.trace(`ERROR: ${message}`);
    process.exit();
  }
  throw new Error(message);
};

// ---------------------------------------------------------------------------
getCallers = function(stackTrace, lExclude = []) {
  var _, caller, iter, lCallers, lMatches;
  iter = stackTrace.matchAll(/at\s+(?:async\s+)?([^\s(]+)/g);
  if (!iter) {
    return ["<unknown>"];
  }
  lCallers = [];
  for (lMatches of iter) {
    [_, caller] = lMatches;
    if (caller.indexOf('file://') === 0) {
      break;
    }
    if (indexOf.call(lExclude, caller) < 0) {
      lCallers.push(caller);
    }
  }
  return lCallers;
};

// ---------------------------------------------------------------------------
//   assert - mimic nodejs's assert
//   return true so we can use it in boolean expressions
export var assert = function(cond, msg) {
  var caller, i, lCallers, len, stackTrace;
  if (!cond) {
    if (doLog) {
      stackTrace = new Error().stack;
      lCallers = getCallers(stackTrace, ['assert']);
      console.log('--------------------');
      console.log('JavaScript CALL STACK:');
      for (i = 0, len = lCallers.length; i < len; i++) {
        caller = lCallers[i];
        console.log(`   ${caller}`);
      }
      console.log('--------------------');
      console.log(`ERROR: ${msg} (in ${lCallers[0]}())`);
    }
    if (doHaltOnError) {
      process.exit();
    }
    error(msg);
  }
  return true;
};

// ---------------------------------------------------------------------------
//   croak - throws an error after possibly printing useful info
export var croak = function(err, label, obj) {
  var curmsg, newmsg;
  if ((typeof err === 'string') || (err instanceof String)) {
    curmsg = err;
  } else {
    curmsg = err.message;
  }
  newmsg = `ERROR (croak): ${curmsg}
${label}:
${JSON.stringify(obj)}`;
  // --- re-throw the error
  throw new Error(newmsg);
};

// ---------------------------------------------------------------------------
export var normalize = function(block) {
  var i, lLines, len, line, ref;
  if (typeof block !== 'string') {
    return block;
  }
  // --- Remove leading and trailing whitespace
  //     Convert all whitespace to single space character
  //     Remove empty lines
  lLines = [];
  ref = block.split(/\r?\n/);
  for (i = 0, len = ref.length; i < len; i++) {
    line = ref[i];
    line = line.trim();
    line = line.replace(/\s+/g, ' ');
    if (!line.match(/^\s*$/)) {
      lLines.push(line);
    }
  }
  return lLines.join('\n');
};

// ---------------------------------------------------------------------------
export var super_normalize = function(block) {
  var func;
  if (typeof block !== 'string') {
    return block;
  }
  // --- Collapse ALL whitespace, including newlines, to space char
  //     Remove whitespace around =+*()<>[]
  block = block.replace(/\s+/sg, ' ');
  func = (match, ch) => {
    return ch;
  };
  block = block.replace(/\s*([=+*()<>\[\]])\s*/g, func);
  return block;
};
